@model miiCard.Consumers.TestHarness.Models.HarnessViewModel

<!doctype html>
<html>
<head>
    <link rel="Stylesheet" type="text/css" href="/Content/bootstrap.min.css" />
    <link rel="Stylesheet" type="text/css" href="/Content/Site.css" />
    <script href="/Scripts/jquery-1.8.2.min.js"></script>
    <script href="/Scripts/bootstrap.min.js"></script>
    <title>.NET miiCard API test harness</title>
    <style type="text/css">
    .page-header { margin-top: 50px; margin-bottom: 10px; }
    input[type=text] { width: 50%; }
    </style>
</head>

<body>
    @using (@Html.BeginForm("Index", "Home")){
<div class="container">
    <div class="row">
        <div class="span12">
            <h1>.NET miiCard API test harness</h1>
        </div>
    </div>
    <form method="POST">
        <div class="page-header">
            <h1>OAuth token settings
            <small>Enter manually or <input type="submit" value="Login with miiCard »" name="btnLoginWithMiiCard" class="btn btn-large" /></small>
            </h1>
        </div>
        <div class="row">
            <div class="span12">
                @if (Model.ShowOAuthDetailsRequiredError)
                {
                <div class="alert alert-error">
                    Keys and secrets are required fields.
                </div>
                }

                @if (!string.IsNullOrWhiteSpace(Model.OAuthProcessErrorText))
                {
                <div class="alert alert-error">
                    An error occurred while performing the OAuth exchange:<br />
                    <code>
                        @Model.OAuthProcessErrorText
                    </code>
                </div>
                }

                @Html.LabelFor(x => x.ConsumerKey)
                @Html.TextBoxFor(x => x.ConsumerKey)
                @Html.ValidationMessageFor(x => x.ConsumerKey)

                @Html.LabelFor(x => x.ConsumerSecret)
                @Html.TextBoxFor(x => x.ConsumerSecret)
                @Html.ValidationMessageFor(x => x.ConsumerSecret)

                @Html.LabelFor(x => x.AccessToken)
                @Html.TextBoxFor(x => x.AccessToken)
                @Html.ValidationMessageFor(x => x.AccessToken)

                @Html.LabelFor(x => x.AccessTokenSecret)
                @Html.TextBoxFor(x => x.AccessTokenSecret)
                @Html.ValidationMessageFor(x => x.AccessTokenSecret)

                @Html.LabelFor(x => x.ReferrerCode)
                @Html.TextBoxFor(x => x.ReferrerCode)
                @Html.ValidationMessageFor(x => x.ReferrerCode)
                <br />

                @Html.CheckBoxFor(x => x.ForceClaimsPicker)
                @Html.LabelFor(x => x.ForceClaimsPicker, new { @style = "display: inline-block;" })
            </div>
        </div>
        <div class="page-header">
            <h1>Claims API methods
            <small>Find the method you want to invoke</small>
            </h1>
        </div>
        <div class="page-header">
            <h2>GetClaims
            <small>Gets the set of data a user has shared with the application</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <p>There are no parameters</p>
                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastGetClaimsResult))
                {
                <p>@Html.Raw(@Model.LastGetClaimsResult)</p>
                }
                <button type="submit" name="btn-invoke" value="get-claims" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>IsUserAssured
            <small>Determines if the user has a current financial validation</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <p>There are no parameters</p>
                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastIsUserAssuredResult))
                {
                    <p>@Html.Raw(Model.LastIsUserAssuredResult)</p>
                }
                <button type="submit" name="btn-invoke" value="is-user-assured" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>IsSocialAccountAssured
            <small>Determines if a given social account belongs to the user</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                @Html.LabelFor(x => x.SocialAccountId)
                @Html.TextBoxFor(x => x.SocialAccountId)

                @Html.LabelFor(x => x.SocialAccountType)
                @Html.TextBoxFor(x => x.SocialAccountType)

                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastIsSocialAccountAssuredResult))
                {
                    <p>@Html.Raw(Model.LastIsSocialAccountAssuredResult)</p>
                }
                <button type="submit" name="btn-invoke" value="is-social-account-assured" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>AssuranceImage
            <small>Renders a graphical representation of LOA</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="social-account-id">Image type</label>
                @Html.TextBoxFor(x => x.AssuranceImageType)
    
                <h4>Result</h4>
                @if (Model.ShowAssuranceImage)
                {
                <p><img src="/Home/AssuranceImage?consumerKey=@Model.ConsumerKey&consumerSecret=@Model.ConsumerSecret&accessToken=@Server.UrlEncode(Model.AccessToken)&accessTokenSecret=@Server.UrlEncode(Model.AccessTokenSecret)&type=@Server.UrlEncode(Model.AssuranceImageType)" /></p>
                }
                <button type="submit" name="btn-invoke" value="assurance-image" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>GetCardImage
            <small>Renders a card-image representation of LOA</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="cardImageSnapshotId">Snapshot ID (optional)</label>
                @Html.TextBoxFor(x => x.CardImageSnapshotId)

                <label for="cardImageFormat">Format (card, signature)</label>
                @Html.TextBoxFor(x => x.CardImageFormat)

                <label class="checkbox" for="CardImageShowEmailAddress">@Html.CheckBoxFor(x => x.CardImageShowEmailAddress) Show email address</label>
                <label class="checkbox" for="CardImageShowPhoneNumber">@Html.CheckBoxFor(x => x.CardImageShowPhoneNumber) Show phone number</label>

                <h4>Result</h4>
                @if (Model.ShowCardImage){
                <p><img src="/Home/CardImage?consumerKey=@Model.ConsumerKey&consumerSecret=@Model.ConsumerSecret&accessToken=@Server.UrlEncode(Model.AccessToken)&accessTokenSecret=@Server.UrlEncode(Model.AccessTokenSecret)&snapshotId=@Server.UrlEncode(Model.CardImageSnapshotId ?? "")&format=@Server.UrlEncode(Model.CardImageFormat ?? "")&showEmailAddress=@Model.CardImageShowEmailAddress.ToString()&showPhoneNumber=@Model.CardImageShowPhoneNumber.ToString()" /></p>
                }

                <button type="submit" name="btn-invoke" value="card-image" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>
        
        <div class="page-header">
            <h2>GetIdentitySnapshotDetails
            <small>Retrieve metadata about an identity snapshot</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="identitySnapshotDetailsSnapshotId">Snapshot ID (blank to list all)</label>
                @Html.TextBoxFor(x => x.SnapshotDetailsId)

                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastGetIdentitySnapshotDetailsResult))
                {
                    <p>@Html.Raw(Model.LastGetIdentitySnapshotDetailsResult)</p>
                }
                <button type="submit" name="btn-invoke" value="get-identity-snapshot-details" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>GetIdentitySnapshot
            <small>Retrieve a previously created snapshot of a miiCard member's identity</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="identitySnapshotId">Snapshot ID</label>
                @Html.TextBoxFor(x => x.SnapshotId)

                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastGetIdentitySnapshotResult))
                {
                    <p>@Html.Raw(Model.LastGetIdentitySnapshotResult)</p>
                }
                <button type="submit" name="btn-invoke" value="get-identity-snapshot" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>GetIdentitySnapshotPdf
            <small>Retrieve a PDF of a previously created snapshot of a miiCard member's identity</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="identitySnapshotId">Snapshot ID</label>
                @Html.TextBoxFor(x => x.SnapshotPdfId)

                <br />
                <button type="submit" name="btn-invoke" value="get-identity-snapshot-pdf" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>

        <div class="page-header">
            <h2>GetAuthenticationDetails
            <small>Retrieve details of how a miiCard member authenticated</small>
            </h2>
        </div>
        <div class="row">
            <div class="span12">
                <h3>Parameters</h3>
                <label for="authenticationDetailsSnapshotId">Snapshot ID</label>
                @Html.TextBoxFor(x => x.AuthenticationDetailsSnapshotId)

                <h4>Result</h4>
                @if (!string.IsNullOrWhiteSpace(Model.LastGetAuthenticationDetailsResult))
                {
                    <p>@Html.Raw(Model.LastGetAuthenticationDetailsResult)</p>
                }
                <button type="submit" name="btn-invoke" value="get-authentication-details" class="btn btn-large">Invoke method &raquo;</button>
            </div>
        </div>
        
        <div class="financials">
            <div class="page-header">
                <h1>Financial API methods
                <small>Find the method you want to invoke</small>
                </h1>
            </div>

            <div class="page-header">
                <h2>IsRefreshInProgress
                <small>Checks if a financial data refresh is ongoing</small>
                </h2>
            </div>
            <div class="row">
                <div class="span12">
                    <h4>Result</h4>
                    @if (!string.IsNullOrWhiteSpace(Model.LastIsRefreshInProgressResult))
                    {
                        <p>@Html.Raw(Model.LastIsRefreshInProgressResult)</p>
                    }

                    <button type="submit" name="btn-invoke" value="is-refresh-in-progress" class="btn btn-large">Invoke method &raquo;</button>
                </div>
            </div>

            <div class="page-header">
                <h2>RefreshFinancialData
                <small>Requests financial data be updated</small>
                </h2>
            </div>
            <div class="row">
                <div class="span12">
                    <h4>Result</h4>
                    @if (!string.IsNullOrWhiteSpace(Model.LastRefreshFinancialDataResult))
                    {
                        <p>@Html.Raw(Model.LastRefreshFinancialDataResult)</p>
                    }

                    <button type="submit" name="btn-invoke" value="refresh-financial-data" class="btn btn-large">Invoke method &raquo;</button>
                </div>
            </div>

            <div class="page-header">
                <h2>GetFinancialTransactions
                <small>Retrieve financial transactions that the member has shared</small>
                </h2>
            </div>
            <div class="row">
                <div class="span12">
                    <h4>Result</h4>
                
                    <label for="financialDataModestyLimit">Hide values absolutely greater than this for modesty (blank to disable)</label>
                    @Html.TextBoxFor(x => x.FinancialDataModestyLimit) <br />

                    @if (!string.IsNullOrWhiteSpace(Model.LastGetFinancialTransactionsResult))
                    {
                        <p>@Html.Raw(Model.LastGetFinancialTransactionsResult)</p>
                    }

                    <button type="submit" name="btn-invoke" value="get-financial-transactions" class="btn btn-large">Invoke method &raquo;</button>
                </div>
            </div>
        </div>
    </form>
</div>
    }
</body>
</html>
